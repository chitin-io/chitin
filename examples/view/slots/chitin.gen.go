// This file is automatically generated, DO NOT EDIT

package person

import (
	"encoding/binary"
	"io"
	"reflect"
	"unsafe"

	"chitin.io/chitin"
	"github.com/dchest/varuint"
)

// use all packages to avoid errors
var (
	_ = io.ErrUnexpectedEOF
	_ reflect.StringHeader
	_ unsafe.Pointer
	_ = varuint.Uint64
)

func chitinParseLengthPrefixed(data []byte) (msg []byte, next []byte, err error) {
loop:
	l, n := varuint.Uint64(data)
	if n < 0 {
		return nil, nil, io.ErrUnexpectedEOF
	}
	if l == 0 {
		// padding
		data = data[n:]
		goto loop
	}
	l--

	const maxInt = int(^uint(0) >> 1)
	if l > uint64(maxInt) {
		// technically, it has to be truncated because it wouldn't fit
		// in memory ;)
		return nil, nil, io.ErrUnexpectedEOF
	}
	li := int(l)

	// TODO prevent overflow here
	end := n + li
	if end > len(data) {
		return nil, nil, io.ErrUnexpectedEOF
	}

	low := n
	high := low + li
	return data[low:high], data[high:], nil
}

func NewPersonV1View(data []byte) (*PersonV1View, error) {
	if len(data) < minLenPersonV1View {
		return nil, chitin.ErrWrongSize
	}
	view := &PersonV1View{
		data: data,
	}
	return view, nil
}

const (
	slotsLenPersonV1View  = 4
	numFieldsPersonV1View = 0
	minLenPersonV1View    = slotsLenPersonV1View + 1*numFieldsPersonV1View
)

type PersonV1View struct {
	data []byte
}

func (v *PersonV1View) Age() uint16 {
	data := v.data[0:2]
	return binary.BigEndian.Uint16(data)
}

func (v *PersonV1View) Siblings() uint16 {
	data := v.data[2:4]
	return binary.BigEndian.Uint16(data)
}

func NewPersonV1Maker() *PersonV1Maker {
	maker := &PersonV1Maker{}
	return maker
}

type PersonV1Maker struct {
	slots [slotsLenPersonV1View]byte
}

func (m *PersonV1Maker) Bytes() []byte {
	// TODO what do we guarantee about immutability of return value?

	// TODO do this in just one allocation
	data := m.slots[:]

	return data
}

func (m *PersonV1Maker) SetAge(v uint16) {
	data := m.slots[0:2]
	binary.BigEndian.PutUint16(data, v)
}

func (m *PersonV1Maker) SetSiblings(v uint16) {
	data := m.slots[2:4]
	binary.BigEndian.PutUint16(data, v)
}
